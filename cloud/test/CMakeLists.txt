# where to put generated libraries
set(LIBRARY_OUTPUT_PATH "${BUILD_DIR}/test")

# where to put generated libraries
set(EXECUTABLE_OUTPUT_PATH "${BUILD_DIR}/test")

set(TEST_LINK_LIBS ${TEST_LINK_LIBS} ResourceManager)

add_executable(sync_point_test
   sync_point_test.cpp
)

add_executable(codec_test
   codec_test.cpp
)

add_executable(keys_test
   keys_test.cpp
)

add_executable(doris_txn_test
   doris_txn_test.cpp
)

add_executable(txn_kv_test
   txn_kv_test.cpp
)

add_executable(recycler_test
   recycler_test.cpp
)

add_executable(mem_txn_kv_test
   mem_txn_kv_test.cpp
)

add_executable(meta_service_test
   meta_service_test.cpp
   meta_service_job_test.cpp
   detach_schema_kv_test.cpp
)

add_executable(rate_limiter_test
    rate_limiter_test.cpp
)

add_executable(encryption_test
   encryption_test.cpp
)

message("Meta-service test dependencies: ${TEST_LINK_LIBS}")
target_link_libraries(sync_point_test
    ${TEST_LINK_LIBS}
)

target_link_libraries(codec_test
    ${TEST_LINK_LIBS}
)

target_link_libraries(keys_test
    ${TEST_LINK_LIBS} 
)

target_link_libraries(meta_service_test
    ${TEST_LINK_LIBS}
)

target_link_libraries(rate_limiter_test
    ${TEST_LINK_LIBS}
)

target_link_libraries(encryption_test
    ${TEST_LINK_LIBS}
)

# FDB related tests need to be linked with libfdb_c
set(FDB_LINKER_FLAGS "-lfdb_c -L${THIRDPARTY_DIR}/lib")

target_link_libraries(doris_txn_test
    ${TEST_LINK_LIBS} 
    ${FDB_LINKER_FLAGS}
)

target_link_libraries(txn_kv_test
    ${TEST_LINK_LIBS} 
    ${FDB_LINKER_FLAGS}
)

target_link_libraries(mem_txn_kv_test
    ${TEST_LINK_LIBS}
    ${FDB_LINKER_FLAGS}
)

target_link_libraries(recycler_test
    ${TEST_LINK_LIBS} 
    ${FDB_LINKER_FLAGS}
)

install(FILES
    ${BASE_DIR}/script/run_all_tests.sh
    ${BASE_DIR}/conf/fdb.cluster
    ${BASE_DIR}/conf/selectdb_cloud.conf
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
    GROUP_READ GROUP_WRITE GROUP_EXECUTE
    WORLD_READ WORLD_EXECUTE
    DESTINATION ${BUILD_DIR}/test)

install(FILES
    ${THIRDPARTY_DIR}/lib/libfdb_c.so
    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE
    GROUP_READ GROUP_WRITE GROUP_EXECUTE
    WORLD_READ WORLD_EXECUTE
    DESTINATION ${BUILD_DIR}/test)

# vim: et tw=120 ts=4 sw=4 cc=80:
